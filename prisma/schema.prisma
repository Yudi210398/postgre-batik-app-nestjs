// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Batik {
  id              Int               @id @default(autoincrement())
  typeBatik       String            @db.VarChar(100)
  stockBatikAwal  Int               @db.Integer
  jenisBatik      String            @db.VarChar(100)
  waktuBikin      DateTime          @default(now())
  tanggalString   String            @db.VarChar(100)
  Pembelian       Pembelian[]
  penambahanStock penambahanStock[]
  laporanBulanan  laporanBulanan[]
  stockSaatIni    Int
  transaksiLog    transaksiLog[]

  @@map("batik")
}

model Customer {
  id           Int            @id @default(autoincrement())
  namaCustomer String         @db.VarChar(100)
  nomorTelp    String         @default("Tidak ada") @db.VarChar(100)
  Pembelian    Pembelian[]
  transaksiLog transaksiLog[]

  @@map("customer")
}

model Pembelian {
  id Int @id @default(autoincrement())

  batikId       Int            @db.Integer
  batik         Batik          @relation(fields: [batikId], references: [id])
  quantity      Int
  customerId    Int            @db.Integer
  customer      Customer       @relation(fields: [customerId], references: [id])
  waktuBikin    DateTime       @default(now())
  nomorBon      String         @default("data belum diisi")
  tanggalString String         @db.VarChar(100)
  transaksiLog  transaksiLog[]

  @@map("pembelian")
}

model Admin {
  id Int @id @default(autoincrement())

  email        String @unique @db.VarChar(100)
  password     String @db.VarChar(100)
  refreshToken String @default("kosong")

  @@map("admins")
}

model laporanBulanan {
  id                Int      @id @default(autoincrement())
  batikId           Int      @db.Integer
  batik             Batik    @relation(fields: [batikId], references: [id])
  stok_awal_bulan   Int      @db.Integer
  stok_akhir_bulan  Int      @db.Integer
  bulan             DateTime @default(now())
  jumlah_terjual    Int      @db.Integer
  jumlah_penambahan Int      @default(0) @db.Integer

  @@map("LaporanBulanan")
}

model penambahanStock {
  id               Int      @id @default(autoincrement())
  batikId          Int      @db.Integer
  batik            Batik    @relation(fields: [batikId], references: [id])
  alasanPenambahan String   @db.Text()
  quantity         Int      @db.Integer
  tanggal          DateTime @default(now())

  @@map("PenambahanStock")
}

model transaksiLog {
  id Int @id @default(autoincrement())

  batikId       Int?       @db.Integer
  batik         Batik?     @relation(fields: [batikId], references: [id])
  customerId    Int?       @db.Integer
  customer      Customer?  @relation(fields: [customerId], references: [id])
  keterangan    String?    @db.Text()
  tanggal       DateTime   @default(now())
  tanggalString String     @db.VarChar(100)
  quantity      Int?       @db.Integer
  pembelianId   Int?       @db.Integer
  pembelian     Pembelian? @relation(fields: [pembelianId], references: [id])
  jenis         String // "PENJUALAN", "PENAMBAHAN_STOK", "EDIT_STOK", "CORRECT", etc.

  @@map("transaksiLog")
}

// ! Prisma Generate dengan nama perubahab
// * npx prisma migrate dev --create-only --name nama_yang_kamu_mau

// ! Prisma Generate Fix
// * npx prisma migrate dev
